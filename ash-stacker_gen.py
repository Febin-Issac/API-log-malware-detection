from tpot import TPOTClassifier
from tpot import TPOTClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd
import xgboost as xgb

def read_csv_file(file_path: str) -> np.array:
    """Reads the labels from the csv file and returns it as an array

    :param file_path: path to the csv file containing the labels to the files in the dataset
    :return: labels as a numpy array
    """
    with open(file_path, 'r') as f:
        f.readline()
        vals = f.readlines()

    data= dict()
    # data = np.empty(shape=(len(vals), 1), dtype=np.float32)

    for val in vals:
        val = val.rstrip('\n')
        val_split = val.split(",")
        data[int(val_split[0])] = int(val_split[1])

    return data

def read_train_file(file_path: str) -> np.array:
    """Reads the labels from the csv file and returns it as an array
    :param file_path: path to the csv file containing the labels to the files in the dataset
    :return: labels as a numpy array
    """
    with open(file_path, 'r') as f:
        f.readline()
        vals = f.readlines()
    data= dict()
    # data = np.empty(shape=(len(vals), 1), dtype=np.float32)
    for val in vals:
        val = val.rstrip('\n')
        val_split = val.split(",")
        data[int(val_split[0])] = float(val_split[1])
    return data

LABELS_FILE = 'valid_y.csv'
DATA_FILE = 'new.csv'
labels = read_csv_file(LABELS_FILE)
train_data = read_train_file(DATA_FILE)
labels_df = pd.DataFrame(list(labels.items()), columns=['Idx', 'y'])
train_df = pd.DataFrame(list(train_data.items()), columns=['Idx', 'X'])
result = train_df.merge(labels_df, how='inner')
result = result.drop('Idx', axis=1)
X = result['X'].to_frame().to_numpy()
y = result['y'].to_frame().to_numpy().ravel()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
# pipeline_optimizer = TPOTClassifier(generations=5, population_size=20, cv=5, random_state=42, verbosity=2)
# pipeline_optimizer.fit(X_train, y_train)
# print(pipeline_optimizer.score(X_test, y_test))
# pipeline_optimizer.export('tpot_exported_pipeline_2.py')

# print(accuracy_score(clf.predict(X_test), y_test))

pipeline_optimizer = TPOTClassifier(generations=5, population_size=20, cv=5, random_state=42, verbosity=2)
pipeline_optimizer.fit(X_train, y_train)
# print(pipeline_optimizer.score(X_test, y_test))
pipeline_optimizer.export('tpot_exported_pipeline_3.py')

print("test-acc:", pipeline_optimizer.score(X_test, y_test))
print("train-acc", pipeline_optimizer.score(X_train, y_train))
