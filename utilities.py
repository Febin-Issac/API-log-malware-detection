from sklearn.metrics import roc_auc_score
from keras.callbacks import Callback
from tqdm import tqdm
import keras.backend as K
import wandb

eps = 1e-12


class ROCAUCCallback(Callback):
    def __init__(self, validation_data):
        self.valid_batch = validation_data

    def on_train_begin(self, logs={}):
        return

    def on_train_end(self, logs={}):
        return

    def on_epoch_begin(self, epoch, logs={}):
        return

    def on_epoch_end(self, epoch, logs={}):
        y_pred = []
        y_val = []
        for i in tqdm(range(len(self.valid_batch)), desc="Calculating ROC-AUC for Validation Data"):
            y_pred.extend(self.model.predict(self.valid_batch[i][0]))
            y_val.extend(self.valid_batch[i][1])
        roc_val = roc_auc_score(y_val, y_pred)
        wandb.log({'roc': round(roc_val, 4)})
        return

    def on_batch_begin(self, batch, logs={}):
        return

    def on_batch_end(self, batch, logs={}):
        wandb.log({'batch_loss': logs['loss'], 'batch_acc': logs['accuracy' if 'accuracy' in logs else 'acc']})
        return
