from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten
from keras.optimizers import Adam
from keras.utils.np_utils import to_categorical
from keras import callbacks
from sklearn.metrics import auc, roc_curve
from dataset_iterator import DataGenerator
from dataset_iterator import read_labels_file
import numpy as np
import os
import matplotlib.pyplot as plt

TRAIN_DATA_DIR = 'dataset/train/'
VALID_DATA_DIR = 'dataset/valid/'
TEST_DATA_DIR = 'dataset/test/'

ORG_TEST_TEST_DIR = 'test/test/'
LABELS_FILE = 'train_kaggle.csv'


if __name__ == '__main__':

    # initializing model
    model = Sequential()
    model.add(Dense(units=200, kernel_initializer='uniform', activation='relu', input_shape=(1000, 102)))
    model.add(Dense(units=50, kernel_initializer='uniform', activation='relu'))
    model.add(Dense(units=10, kernel_initializer='uniform', activation='relu'))
    model.add(Flatten())
    model.add(Dense(units=500, kernel_initializer='uniform', activation='relu'))
    model.add(Dense(units=10, kernel_initializer='uniform', activation='relu'))
    model.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.load_weights('model.h5')
    model.summary()

    # loading dataset
    test_batch = DataGenerator(TEST_DATA_DIR, LABELS_FILE, len(os.listdir(TEST_DATA_DIR)))

    # scoring the model
    score = model.evaluate(test_batch[0][0], test_batch[0][1])
    print(score)

    # expected test dataset
    org_test_batch = DataGenerator(ORG_TEST_TEST_DIR, LABELS_FILE, len(os.listdir(ORG_TEST_TEST_DIR)), shuffle=False)

    expected_preds = model.predict(org_test_batch[0][0])
    print(map(org_test_batch.file_ids, expected_preds))



    # model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # y = np.zeros(shape=(len(os.listdir(TEST_DATA_DIR)), 1))
    # labels = read_labels_file('train_kaggle.csv')
    # indexes=np.array([int(file_name.split(".")[0]) for file_name in os.listdir(TEST_DATA_DIR)])
    # for idx, id in enumerate(indexes):
    #     y[idx] = (labels[id])

    y_pred = model.predict(test_batch[0][0],verbose=1)
    y = test_batch[0][1]
    # print(y.shape)
    # print(y_pred.shape)
    fpr_keras, tpr_keras, thresholds_keras = roc_curve(y, y_pred)
    print(len(fpr_keras), len(tpr_keras))
    auc_keras = auc(fpr_keras, tpr_keras)
    plt.figure(1)
    plt.plot([0, 1], [0, 1], 'k--')
    plt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))
    # plt.plot(fpr_rf, tpr_rf, label='RF (area = {:.3f})'.format(auc_rf))
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate')
    plt.title('ROC curve')
    plt.legend(loc='best')
    plt.show()



